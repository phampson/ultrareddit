{"ast":null,"code":"import _classCallCheck from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Parker/Desktop/ww_challenge/reddit/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport Navigationbar from \"./Navbar/Navigationbar.js\";\nimport { Jumbotron, Panel } from 'react-bootstrap';\nimport './App.css';\nimport axios from 'axios';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      subreddits: ['/r/pokemon', '/r/people', '/r/zelda'],\n      posts: [],\n      newSubreddit: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"removeSub\",\n    value: function removeSub(i) {\n      // Removing the proper subreddit\n      this.state.subreddits.splice(i, 1);\n    }\n  }, {\n    key: \"addSub\",\n    value: function addSub(subreddit) {\n      var _this2 = this;\n\n      // Adding a valid subreddit if axios returns with information\n      axios.get('http://www.reddit.com/' + subreddit + '.json').then(function (res) {\n        _this2.state.subreddits.push(subreddit);\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        newSubreddit: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // Try to get all of our posts from reddit's api\n      axios.get('http://www.reddit.com/r/todayilearned/.json').then(function (res) {\n        var posts = res.data.data.children.map(function (obj) {\n          return obj.data;\n        });\n\n        _this3.setState({\n          posts: posts\n        });\n      }); //console.log(\"Check if our SubRedits will ever update!\")\n      //console.log(this.state.subreddits);\n\n      if (this.state.posts && this.state.posts.length > 0) {\n        return React.createElement(\"div\", {\n          className: \"App-wrapper title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(Navigationbar, {\n          subreddits: this.state.subreddits,\n          newSubreddit: this.state.newSubreddit,\n          removeSub: this.removeSub.bind(this),\n          addSub: this.addSub.bind(this),\n          handleChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"panelContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, this.state.posts.map(function (post) {\n          return React.createElement(\"a\", {\n            href: 'http://www.reddit.com/' + post.permalink,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, React.createElement(Panel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(Panel.Heading, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, React.createElement(Panel.Title, {\n            componentClass: \"h3\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"panelTitle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, post.author, \" posted on \", post.subreddit))), React.createElement(Panel.Body, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, post.title)));\n        })));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App-wrapper title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(Navigationbar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }), React.createElement(Jumbotron, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, \"Hi there friend\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, \"It looks like you have no subreddits, oh my!!! Add one up above.\")));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Parker/Desktop/ww_challenge/reddit/src/App.js"],"names":["React","Component","Navigationbar","Jumbotron","Panel","axios","App","state","subreddits","posts","newSubreddit","i","splice","subreddit","get","then","res","push","event","setState","target","value","data","children","map","obj","length","removeSub","bind","addSub","handleChange","post","permalink","author","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Navigationbar from \"./Navbar/Navigationbar.js\";\nimport { Jumbotron, Panel } from 'react-bootstrap';\nimport './App.css';\nimport axios from 'axios'\n\nclass App extends Component {\n  state = {\n    subreddits: [ '/r/pokemon', '/r/people', '/r/zelda'],\n    posts: [],\n    newSubreddit: ''\n  }\n\n  removeSub(i){\n    // Removing the proper subreddit\n    this.state.subreddits.splice(i, 1);\n  }\n\n  addSub(subreddit){\n    // Adding a valid subreddit if axios returns with information\n    axios.get('http://www.reddit.com/' + subreddit + '.json').then(res => {\n      this.state.subreddits.push(subreddit);\n    })\n  }\n\n  handleChange(event){\n    this.setState({newSubreddit: event.target.value})\n  }\n\n  render() {\n    // Try to get all of our posts from reddit's api\n    axios.get('http://www.reddit.com/r/todayilearned/.json').then(res => {\n      const posts = res.data.data.children.map(obj => obj.data);\n      this.setState({posts});\n    })\n\n    //console.log(\"Check if our SubRedits will ever update!\")\n    //console.log(this.state.subreddits);\n\n    if (this.state.posts && this.state.posts.length > 0){\n      return (\n        <div className=\"App-wrapper title\">\n          <Navigationbar\n            subreddits={this.state.subreddits}\n            newSubreddit={this.state.newSubreddit}\n            removeSub={this.removeSub.bind(this)}\n            addSub={this.addSub.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <div className=\"panelContainer\">\n            {this.state.posts.map(post =>\n              <a href={'http://www.reddit.com/'+post.permalink}>\n              <Panel>\n                <Panel.Heading>\n                  <Panel.Title componentClass=\"h3\">\n                    <div className=\"panelTitle\">\n                      {post.author} posted on {post.subreddit}\n                    </div>\n                  </Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                  {post.title}\n                </Panel.Body>\n              </Panel>\n              </a>\n            )}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App-wrapper title\">\n          <Navigationbar />\n          <Jumbotron>\n            <h1>Hi there friend</h1>\n            <p>\n              It looks like you have no subreddits, oh my!!! Add one up above.\n            </p>\n          </Jumbotron>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
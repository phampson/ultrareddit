{"ast":null,"code":"import _toConsumableArray from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Parker/Desktop/ww_challenge/reddit/src/App.js\";\nimport React, { Component } from 'react';\nimport Navigationbar from \"./Navbar/Navigationbar.js\";\nimport Post from \"./Post/Post.js\";\nimport { Jumbotron } from 'react-bootstrap';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      subreddits: [],\n      newSubreddit: '',\n      completeData: []\n    };\n    _this.posts = [];\n    _this.removeSub = _this.removeSub.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addSub = _this.addSub.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"removeSub\",\n    value: function removeSub(i) {\n      // Removing the proper subreddit\n      this.setState({\n        subreddits: this.state.subreddits.splice(i, 1)\n      });\n      localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits)); //window.location.reload();\n    }\n  }, {\n    key: \"addSub\",\n    value: function addSub() {\n      // Adding every input for now\n      if (localStorage.getItem(\"subreddits\")) {\n        this.state.subreddits = _toConsumableArray(this.state.subreddits).concat([this.state.newSubreddit]);\n        localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n      } else {\n        //First entry\n        localStorage.setItem(\"subreddits\", JSON.stringify([this.state.newSubreddit]));\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      // Called when someone submits a new subreddit from the navbar\n      this.setState({\n        newSubreddit: event.target.value\n      });\n      console.log(this.state.newSubreddit);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Check to see if we have anything stored\n      if (localStorage.getItem(\"subreddits\")) {\n        this.state.subreddits = JSON.parse(localStorage.getItem(\"subreddits\"));\n      }\n\n      if (this.state.subreddits.length > 0) {\n        return React.createElement(\"div\", {\n          className: \"App-wrapper title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(Navigationbar, {\n          subreddits: this.state.subreddits,\n          newSubreddit: this.state.newSubreddit,\n          removeSub: this.removeSub.bind(this),\n          addSub: this.addSub.bind(this),\n          handleChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"panelContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, this.state.subreddits.map(function (subreddit) {\n          return React.createElement(Post, {\n            subreddit: subreddit,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          });\n        })));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App-wrapper title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(Navigationbar, {\n          subreddits: this.state.subreddits,\n          newSubreddit: this.state.newSubreddit,\n          removeSub: this.removeSub.bind(this),\n          addSub: this.addSub.bind(this),\n          handleChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), React.createElement(Jumbotron, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Hi there friend\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"It looks like you have no subreddits, oh nooo!!! Add one up above.\")));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Parker/Desktop/ww_challenge/reddit/src/App.js"],"names":["React","Component","Navigationbar","Post","Jumbotron","App","props","state","subreddits","newSubreddit","completeData","posts","removeSub","bind","addSub","handleChange","i","setState","splice","localStorage","setItem","JSON","stringify","getItem","event","target","value","console","log","parse","length","map","subreddit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navigationbar from \"./Navbar/Navigationbar.js\";\nimport Post from \"./Post/Post.js\";\nimport { Jumbotron } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      subreddits: [],\n\n      newSubreddit: '',\n      completeData: []\n    }\n\n    this.posts = [];\n    this.removeSub = this.removeSub.bind(this);\n    this.addSub = this.addSub.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  removeSub(i){\n    // Removing the proper subreddit\n    this.setState({subreddits: this.state.subreddits.splice(i, 1)});\n    localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n    //window.location.reload();\n  }\n\n  addSub(){\n    // Adding every input for now\n    if(localStorage.getItem(\"subreddits\")){\n      this.state.subreddits = [...this.state.subreddits, this.state.newSubreddit];\n      localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n    } else {\n      //First entry\n      localStorage.setItem(\"subreddits\", JSON.stringify([this.state.newSubreddit]));\n    }\n  }\n\n  handleChange(event){\n    // Called when someone submits a new subreddit from the navbar\n    this.setState({newSubreddit: event.target.value});\n    console.log(this.state.newSubreddit);\n  }\n\n  render() {\n    // Check to see if we have anything stored\n    if(localStorage.getItem(\"subreddits\")){\n      this.state.subreddits =  JSON.parse(localStorage.getItem(\"subreddits\"));\n    }\n\n    if(this.state.subreddits.length > 0){\n      return (\n        <div className=\"App-wrapper title\">\n          <Navigationbar\n            subreddits={this.state.subreddits}\n            newSubreddit={this.state.newSubreddit}\n            removeSub={this.removeSub.bind(this)}\n            addSub={this.addSub.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <div className=\"panelContainer\">\n            {this.state.subreddits.map(subreddit =>\n              <Post subreddit={subreddit}/>\n            )}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App-wrapper title\">\n          <Navigationbar\n            subreddits={this.state.subreddits}\n            newSubreddit={this.state.newSubreddit}\n            removeSub={this.removeSub.bind(this)}\n            addSub={this.addSub.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <Jumbotron>\n            <h1>Hi there friend</h1>\n            <p>It looks like you have no subreddits, oh nooo!!! Add one up above.</p>\n          </Jumbotron>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
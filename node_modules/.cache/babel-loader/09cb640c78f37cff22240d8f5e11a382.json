{"ast":null,"code":"import _classCallCheck from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Parker/Desktop/ww_challenge/reddit/src/Post/Post.js\";\nimport React, { Component } from 'react';\nimport { Jumbotron, Panel } from 'react-bootstrap';\nimport axios from 'axios';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post(props) {\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    _this.state = {\n      posts: []\n    };\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Post, [{\n    key: \"collectPosts\",\n    value: function collectPosts() {\n      axios.get('http://www.reddit.com/r/' + this.props.subreddit + '/.json').then(function (response) {\n        console.log(\"===>Inside the promise<===\");\n\n        if (arr && arr.length > 0) {// Posts arent empty so append\n\n          /*obj.completeData = obj.posts.push(...response.data.data.children.slice(0, 10));\n          console.log(\"Inside an append\");\n          console.log(obj.posts);\n          obj.setState({posts: this.posts});\n          */\n        } else {\n          // Posts are empty so no need to append\n          console.log(\"Inside initial add\");\n          return response.data.data.children.slice(0, 10);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"a\", {\n        href: 'http://www.reddit.com/',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(Panel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Panel.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Panel.Title, {\n        componentClass: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"panelTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.subreddit))), React.createElement(Panel.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"as;dflkjas;ldfkja;sdflkjas;dlkfj\")));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nexport default Post;","map":{"version":3,"sources":["/Users/Parker/Desktop/ww_challenge/reddit/src/Post/Post.js"],"names":["React","Component","Jumbotron","Panel","axios","Post","props","state","posts","get","subreddit","then","response","console","log","arr","length","data","children","slice","catch","error"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,iBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AADgB;AAIjB;;;;mCACa;AACZJ,MAAAA,KAAK,CAACK,GAAN,CAAU,6BAA4B,KAAKH,KAAL,CAAWI,SAAvC,GAAkD,QAA5D,EACGC,IADH,CACQ,UAASC,QAAT,EAAmB;AACvBC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AAEA,YAAGC,GAAG,IAAIA,GAAG,CAACC,MAAJ,GAAa,CAAvB,EAAyB,CACvB;;AACA;;;;;AAKD,SAPD,MAOO;AACL;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,iBAAOF,QAAQ,CAACK,IAAT,CAAcA,IAAd,CAAmBC,QAAnB,CAA4BC,KAA5B,CAAkC,CAAlC,EAAqC,EAArC,CAAP;AACD;AACF,OAhBH,EAiBGC,KAjBH,CAiBS,UAASC,KAAT,EAAgB;AACrBR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD,OAnBH;AAoBD;;;6BACO;AACN,aACE;AAAG,QAAA,IAAI,EAAE,wBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,KAAP;AAAa,QAAA,cAAc,EAAC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKf,KAAL,CAAWI,SADd,CADF,CADF,CADF,EAQE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CARF,CADA,CADF;AAgBD;;;;EA7CgBT,S;;AAgDnB,eAAeI,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Jumbotron, Panel } from 'react-bootstrap';\nimport axios from 'axios'\n\nclass Post extends Component {\n  constructor(props){\n    this.state = {\n      posts: []\n    }\n  }\n  collectPosts(){\n    axios.get('http://www.reddit.com/r/'+ this.props.subreddit +'/.json')\n      .then(function(response) {\n        console.log(\"===>Inside the promise<===\");\n\n        if(arr && arr.length > 0){\n          // Posts arent empty so append\n          /*obj.completeData = obj.posts.push(...response.data.data.children.slice(0, 10));\n          console.log(\"Inside an append\");\n          console.log(obj.posts);\n          obj.setState({posts: this.posts});\n          */\n        } else {\n          // Posts are empty so no need to append\n          console.log(\"Inside initial add\");\n          return response.data.data.children.slice(0, 10);\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n  }\n  render(){\n    return(\n      <a href={'http://www.reddit.com/'}>\n      <Panel>\n        <Panel.Heading>\n          <Panel.Title componentClass=\"h3\">\n            <div className=\"panelTitle\">\n              {this.props.subreddit}\n            </div>\n          </Panel.Title>\n        </Panel.Heading>\n        <Panel.Body>\n          as;dflkjas;ldfkja;sdflkjas;dlkfj\n        </Panel.Body>\n      </Panel>\n      </a>\n    );\n  }\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _toConsumableArray from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Parker/Desktop/ww_challenge/reddit/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Parker/Desktop/ww_challenge/reddit/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport Navigationbar from \"./Navbar/Navigationbar.js\";\nimport { Jumbotron, Panel } from 'react-bootstrap';\nimport './App.css';\nimport axios from 'axios';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      subreddits: [],\n      newSubreddit: '',\n      completeData: []\n    };\n    _this.posts = [];\n    _this.removeSub = _this.removeSub.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addSub = _this.addSub.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addPosts = _this.addPosts.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"removeSub\",\n    value: function removeSub(i) {\n      // Removing the proper subreddit\n      this.setState({\n        subreddits: this.state.subreddits.splice(i, 1)\n      });\n      localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n      window.location.reload();\n    }\n  }, {\n    key: \"addSub\",\n    value: function addSub() {\n      // Adding every input for now\n      if (localStorage.getItem(\"subreddits\")) {\n        this.state.subreddits = _toConsumableArray(this.state.subreddits).concat([this.state.newSubreddit]);\n        localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n      } else {\n        //First entry\n        localStorage.setItem(\"subreddits\", JSON.stringify([this.state.newSubreddit]));\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        newSubreddit: event.target.value\n      });\n      console.log(this.state.newSubreddit);\n    }\n  }, {\n    key: \"addPosts\",\n    value: function addPosts(x) {\n      /*\n      console.log(x);\n      fetch('http://www.reddit.com/r/'+ x +'/.json')\n      .then(res => res.json())\n      .then((out) => {\n        if(this.state.posts.length > 0 && this.state.posts.length < this.state.subreddits.length * 10){\n          // Posts arent empty so append\n          this.completeData = this.state.posts.push(...out.data.children.slice(0, 10));\n          console.log(this.state.posts);\n          this.setState({posts: this.state.posts});\n        } else {\n          // Posts are empty so no need to append\n          //this.state.posts = out.data.children;\n          //console.log(out.data);\n          this.setState({ posts: out.data.children.slice(0, 10)});\n        }\n      })\n      .catch(err => { throw err });\n      */\n      // Use state as a way to access inside the promise\n      var obj = this;\n      var state = this.state;\n      console.log(\"Top\");\n      axios.get('http://www.reddit.com/r/' + x + '/.json').then(function (response) {\n        console.log(\"===>Inside the promise<===\");\n        obj.posts = response.data.data.children.slice(0, 10);\n        console.log(\"Inside initial add\");\n        console.log(obj.posts);\n        /*if(state.posts && state.posts.length > 0){\n          // Posts arent empty so append\n          obj.completeData = obj.posts.push(...response.data.data.children.slice(0, 10));\n          console.log(\"Inside an append\");\n          console.log(obj.posts);\n           obj.setState({posts: this.posts});\n        } else {\n          // Posts are empty so no need to append\n          obj.posts = response.data.data.children.slice(0, 10);\n          console.log(\"Inside initial add\");\n          console.log(obj.posts);\n        }*/\n      }).catch(function (error) {\n        console.log(error);\n      });\n      console.log(\"Bottom\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // Check to see if we have anything stored\n      if (localStorage.getItem(\"subreddits\")) {\n        this.state.subreddits = JSON.parse(localStorage.getItem(\"subreddits\"));\n      } // Try to get all of our posts from reddit's api\n      // Add all the posts to posts\n\n\n      this.state.subreddits.forEach(function (element) {\n        _this2.addPosts(element);\n      });\n\n      if (this.state.posts && this.state.posts.length > 0) {\n        return React.createElement(\"div\", {\n          className: \"App-wrapper title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(Navigationbar, {\n          subreddits: this.state.subreddits,\n          newSubreddit: this.state.newSubreddit,\n          removeSub: this.removeSub.bind(this),\n          addSub: this.addSub.bind(this),\n          handleChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"panelContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, this.state.posts.map(function (post) {\n          return React.createElement(\"a\", {\n            href: 'http://www.reddit.com/' + post.data.permalink,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(Panel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, React.createElement(Panel.Heading, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, React.createElement(Panel.Title, {\n            componentClass: \"h3\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"panelTitle\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, post.data.author, \" posted on \", post.data.subreddit))), React.createElement(Panel.Body, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }, post.data.title)));\n        })));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App-wrapper title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(Navigationbar, {\n          subreddits: this.state.subreddits,\n          newSubreddit: this.state.newSubreddit,\n          removeSub: this.removeSub.bind(this),\n          addSub: this.addSub.bind(this),\n          handleChange: this.handleChange.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }), React.createElement(Jumbotron, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, \"Hi there friend\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"It looks like you have no subreddits, oh my!!! Add one up above.\")));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Parker/Desktop/ww_challenge/reddit/src/App.js"],"names":["React","Component","Navigationbar","Jumbotron","Panel","axios","App","props","state","subreddits","newSubreddit","completeData","posts","removeSub","bind","addSub","handleChange","addPosts","i","setState","splice","localStorage","setItem","JSON","stringify","window","location","reload","getItem","event","target","value","console","log","x","obj","get","then","response","data","children","slice","catch","error","parse","forEach","element","length","map","post","permalink","author","subreddit","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Navigationbar from \"./Navbar/Navigationbar.js\";\nimport { Jumbotron, Panel } from 'react-bootstrap';\nimport './App.css';\nimport axios from 'axios'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      subreddits: [],\n\n      newSubreddit: '',\n      completeData: []\n    }\n\n    this.posts = [];\n    this.removeSub = this.removeSub.bind(this);\n    this.addSub = this.addSub.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addPosts = this.addPosts.bind(this);\n  }\n\n  removeSub(i){\n    // Removing the proper subreddit\n    this.setState({subreddits: this.state.subreddits.splice(i, 1)});\n    localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n    window.location.reload();\n  }\n\n  addSub(){\n    // Adding every input for now\n    if(localStorage.getItem(\"subreddits\")){\n      this.state.subreddits = [...this.state.subreddits, this.state.newSubreddit];\n      localStorage.setItem(\"subreddits\", JSON.stringify(this.state.subreddits));\n    } else {\n      //First entry\n      localStorage.setItem(\"subreddits\", JSON.stringify([this.state.newSubreddit]));\n    }\n  }\n\n  handleChange(event){\n    this.setState({newSubreddit: event.target.value});\n    console.log(this.state.newSubreddit);\n  }\n\n  addPosts(x){\n    /*\n    console.log(x);\n    fetch('http://www.reddit.com/r/'+ x +'/.json')\n    .then(res => res.json())\n    .then((out) => {\n      if(this.state.posts.length > 0 && this.state.posts.length < this.state.subreddits.length * 10){\n        // Posts arent empty so append\n        this.completeData = this.state.posts.push(...out.data.children.slice(0, 10));\n        console.log(this.state.posts);\n        this.setState({posts: this.state.posts});\n      } else {\n        // Posts are empty so no need to append\n        //this.state.posts = out.data.children;\n        //console.log(out.data);\n        this.setState({ posts: out.data.children.slice(0, 10)});\n      }\n    })\n    .catch(err => { throw err });\n    */\n\n    // Use state as a way to access inside the promise\n    let obj = this;\n    let state = this.state;\n    console.log(\"Top\");\n    axios.get('http://www.reddit.com/r/'+ x +'/.json')\n      .then(function(response) {\n        console.log(\"===>Inside the promise<===\");\n        obj.posts = response.data.data.children.slice(0, 10);\n        console.log(\"Inside initial add\");\n        console.log(obj.posts);\n        /*if(state.posts && state.posts.length > 0){\n          // Posts arent empty so append\n          obj.completeData = obj.posts.push(...response.data.data.children.slice(0, 10));\n          console.log(\"Inside an append\");\n          console.log(obj.posts);\n\n          obj.setState({posts: this.posts});\n        } else {\n          // Posts are empty so no need to append\n          obj.posts = response.data.data.children.slice(0, 10);\n          console.log(\"Inside initial add\");\n          console.log(obj.posts);\n        }*/\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n      console.log(\"Bottom\");\n\n  }\n\n  render() {\n    // Check to see if we have anything stored\n    if(localStorage.getItem(\"subreddits\")){\n      this.state.subreddits =  JSON.parse(localStorage.getItem(\"subreddits\"));\n    }\n\n    // Try to get all of our posts from reddit's api\n\n\n    // Add all the posts to posts\n    this.state.subreddits.forEach(element => {\n      this.addPosts(element);\n    })\n\n    if (this.state.posts && this.state.posts.length > 0){\n      return (\n        <div className=\"App-wrapper title\">\n          <Navigationbar\n            subreddits={this.state.subreddits}\n            newSubreddit={this.state.newSubreddit}\n            removeSub={this.removeSub.bind(this)}\n            addSub={this.addSub.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <div className=\"panelContainer\">\n            {this.state.posts.map(post =>\n              <a href={'http://www.reddit.com/'+post.data.permalink}>\n              <Panel>\n                <Panel.Heading>\n                  <Panel.Title componentClass=\"h3\">\n                    <div className=\"panelTitle\">\n                      {post.data.author} posted on {post.data.subreddit}\n                    </div>\n                  </Panel.Title>\n                </Panel.Heading>\n                <Panel.Body>\n                  {post.data.title}\n                </Panel.Body>\n              </Panel>\n              </a>\n            )}\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App-wrapper title\">\n          <Navigationbar\n            subreddits={this.state.subreddits}\n            newSubreddit={this.state.newSubreddit}\n            removeSub={this.removeSub.bind(this)}\n            addSub={this.addSub.bind(this)}\n            handleChange={this.handleChange.bind(this)}\n          />\n          <Jumbotron>\n            <h1>Hi there friend</h1>\n            <p>\n              It looks like you have no subreddits, oh my!!! Add one up above.\n            </p>\n          </Jumbotron>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}